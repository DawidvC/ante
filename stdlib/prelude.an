/*
        prelude.an
    Standard functions and datatypes pre-imported 
    into every Ante source file.
*/

//C functions
fun printf: c8* fmt, ... -> i32;
fun puts: c8* str -> i32;
fun putchar: c8 char;
fun getchar: -> c8;
fun exit: i32 status;
fun malloc: usz size -> void*;
fun realloc: void* ptr, usz size -> void*;
fun free: void* mem;
fun memcpy: void* dest src, usz bytes -> void* /*dest*/;
fun system: c8* cmd -> i32;
fun strlen: c8* str -> usz;

//C stdio
type File = void*
type FilePos = void*

type InFile = File
type OutFile = File

fun fopen: c8* fName, c8* mode -> File;
fun fclose: File file;

fun fputs: c8* str, OutFile file;
fun fputc: c8 char, OutFile file;
fun fgetc: InFile file -> c8;
fun fgets: c8* str, i32 numBytes, InFile file -> c8*;
fun ungetc: c8 c, InFile file -> i32;

fun fgetpos: File f, FilePos fp;
fun ftell: File f -> i64;
fun fsetpos: File f, FilePos fp;
fun fseek: File f, i64 offset, i32 origin;

fun feof: InFile f -> bool;
fun ferror: File f -> bool;



//Ante datatypes
type Str = c8* cStr, usz len


//Compile-time functions

//prints type and value (llvm dump) of variable while compiling
![meta]
fun Ante.debug: 't t;

//returns the size of a type in Bytes.  Accepts types or values as an argument
![meta]
fun Ante.sizeof: 't t -> usz;


//numerical print functions
![inline]
fun i8.print: i8 x
    printf "%hhd\n" x

![inline]
fun i16.print: i16 x
    printf "%hd\n" x

![inline]
fun i32.print: i32 x
    printf "%d\n" x

![inline]
fun i64.print: i64 x
    printf "%ld\n" x

![inline]
fun isz.print: isz x
    printf "%ld\n" x

//unsigned
![inline]
fun u8.print: u8 x
    printf "%hhu\n" x

![inline]
fun u16.print: u16 x
    printf "%hu\n" x

![inline]
fun u32.print: u32 x
    printf "%u\n" x

![inline]
fun u64.print: u64 x
    printf "%lu\n" x

![inline]
fun usz.print: usz x
    printf "%lu\n" x

//floats
![inline]
fun f16.print: f16 x 
    printf "%.2f\n" (f64 x)

![inline]
fun f32.print: f32 x
    printf "%f\n" (f64 x)

![inline]
fun f64.print: f64 x
    printf "%.14f\n" x

//char
![inline]
fun c8.print: c8 x
    printf "%c\n" x

//c-string
![inline]
fun print: c8* s
    puts s

![inline]
fun c8*.init: Str s = s.cStr

//For-loops work over any range that is Iterable
trait Iterable
    fun into_iter: Iterable i -> Iterator

trait Iterator
    fun next: Iterator i -> Iterator
    fun unwrap: Iterator i -> 't
    fun has_next: Iterator i -> bool


type Range = i32 start end step

//returns true if a is in the range r
fun (in): i32 a, Range r -> bool
    if r.step == 1 then
        r.start <= a and a <= r.end
    else
        let a_adj = a % r.step
        let s_adj = r.start % r.step

        a_adj == s_adj and r.start <= a and a <= r.end

//creates an inclusive range
fun (..): i32 start end -> Range
    Range(start, end, if end > start then 1 else -1)

//Takes a tuple of the first two integers and calculates the step by their difference
fun (..): i32,i32 first_two, i32 end -> Range
    Range(first_two#0, end, first_two#1 - first_two#0)

ext Range: Iterator
    fun next: Range r -> Range
        //make sure range of n..n is not an infinite loop
        if r.start == r.end then
            Range(2,0,1)
        else
            Range(r.start+r.step, r.end, r.step)

    fun unwrap: Range r =
        r.start

    fun has_next: Range r =
        if r.step > 0 then
            r.start <= r.end
        else
            r.start >= r.end


//Iterating through an InFile iterates through each line
ext InFile: Iterator
    fun has_next: InFile f = not feof f

    fun next: InFile f = f

    fun unwrap: InFile f = next_line f


![inline]
fun OutFile.write: OutFile f, c8* cStr
    fputs cStr f

![inline]
fun OutFile.write: OutFile f, c8 c
    fputc c f

//Str functions
![inline]
fun Str.print: Str s
    puts s.cStr

![inline]
fun Str.write: Str s, OutFile f
    fputs (s.cStr) f


![inline]
fun Str.init: c8* cStr -> Str
    Str(cStr, usz strlen cStr)


fun (==): Str l r -> bool
    if l.len != r.len then
        return false

    var i = 0
    while l.cStr#i != '\0' do
        if l.cStr#i != r.cStr#i then
            return false

        i += 1

    l.cStr#i == r.cStr#i


fun (++): Str s1 s2 -> Str
    let len = s1.len + s2.len
    var buf = malloc (len+1)

    memcpy buf (s1.cStr) s1.len

    var buf_offset = void*(u64 buf + s1.len)
    memcpy buf_offset s2.cStr (s2.len+1) //copy terminating null too

    Str(c8* buf, len)

![inline]
fun (#): Str s, i32 index = s.cStr#index

![inline]
fun (#): Str s, i32 i, c8 c
    s.cStr#i = c


//IO
fun InFile.init: Str fName -> InFile
    InFile fopen (fName.cStr) "r"


fun OutFile.init: Str fName -> OutFile
    OutFile fopen (fName.cStr) "w"


fun InFile.next_line: InFile f -> Str
    if feof f then return ""
    let eof = c8 255

    var len = 0usz
    var cap = 64usz
    var cstr = c8* malloc cap

    while
        let c = fgetc f

        if c == eof then break

        //Flag feof if eof occurs after terminating newline
        if c == '\n' then
            let peek = fgetc f
            if peek != eof then ungetc peek f
            break

        if len+1 >= cap then
            cap *= 2
            cstr = realloc cstr cap

        cstr#len = c
        len += 1
        true
    do ()

    cstr#len = '\0'
    Str(cstr, len)



//print string without endline
fun printne: c8* str
    var i = 0
    while str#i != '\0' do
        putchar (str#i)
        i += 1

//print a message then return user input
fun input: c8* msg -> Str
    var len = 0usz
    var cstr = c8* 0

    printne msg

    while
        let c = getchar ()
        if len % 32 == 0 then
            cstr = realloc cstr (len+32)

        cstr#len = c
        len += 1
        c != '\n'
    do ()

    len -= 1
    cstr#len = '\0'
    Str(cstr, len)
