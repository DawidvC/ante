
type Maybe!'t =
   | Some 't
   | None

type List<'t> = Maybe!Node<'t>* first, Maybe!Node<'t>* last

type Node<'t> = 't elem, Maybe!Node<'t>* next

fun Node<'t>.init: 't elem -> Node!'t
    Node(elem, None)

fun List<'t>.init: 't elem -> List!'t
    let n = new Node elem
    List(Some n, Some n)


fun append: mut List<'t> l, 't elem
    let n = new Node elem

    match l.last with
    | Some last ->
        last.next = Some n
        l.last = Some n
    | None ->
        l.first = Some n
        l.last = Some n


fun print: List l
    match l.first with
    | Some n -> print n


fun print: Node* l
    print l.elem
    match l.next with
    | Some n -> print n


var head = List 0

append head 1
append head 2
append head 3

print head
